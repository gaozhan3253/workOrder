<?php
/**
 * Created by PhpStorm.
 * User: gaozhan
 * Date: 2018/7/30
 * Time: 20:04
 */

namespace App\Channel\Core\Postal;


use App\Channel\Core\BaseChannel;
use App\Services\WorkOrderService;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Log;

class ChinaFoshanPostal extends BaseChannel
{
    /**
     * 配置信息
     * @var array
     */
    protected $config = [
        // 请求方式 curl|soap
        'requestMethod' => 'soap',
        // 请求方式 get|post|soap-method
        'method' => 'prepareImportOrder',
        //是否https
        'https' => false,
        // 请求头
        'headers' => ['charset=utf-8'],
        // 请求的数据类型，只对post请求生效, (xml|json|array)
        'dataType' => 'json',
        // 请求地址
        'url' => 'http://test01.routdata.com/szsdsselfsys/services/mailSearch?WSDL',
        //token
        'token' => 'b963fe00d9ba45bc63e9f90f9a70b9c4',
        // 要合并的请求体，只对post请求生效
        'requestBody' => [],
        // 额外参数
        'params' => [],
        //接口对接顺序
        'pushDockSequence' => [self::PUSH_ORDER],
        //接口对接链接接口超时时间
        'connectTimeOut' => 10,
        //接口对接过程超时时间
        'timeOut' => 60,
    ];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        var_dump($this->config);
        exit;
    }


    protected function formatData()
    {
        switch ($this->currentDockType) {
            case self::PUSH_ORDER:
                $this->pushOrderData();
                break;
            case self::GET_TRUNKING;
                $this->getTrunkingData();
                break;
            case self::GET_LABEL:
                $this->getLabel();
                break;
            case self::UPDATE_WEIGHT:
                $this->updateWeight();
                break;
        }
        return $this;
    }

    protected function pushOrderData()
    {
        if ($this->workOrder->is_trunking == 1) {
            $orderType = 4;
        } else {
            $orderType = 5;
        }
        //获取订单总重量
        $subWeight = WorkOrderService::getOrderSubWeight($this->workOrder->order_id);

        $buyer = $this->workOrder->serviceOrderBuyer;

        $innerList[] = array(
            'innerName' => '',
            'innerNameEn' => 'innerNameEn',
            'innerQty' => '10',
            'innerWeight' => '10',
            'innerPrice' => '20',
            'sku' => 'xx',
            'original' => 'CN',
            'customsCode' => '',
            'innerIngredient' => ''
        );

        $requestData = [
            'custToken' => $this->token,
            'orderType' => $orderType,
            'logisticsProduct' => '637',
            'orderId' => $this->workOrder->order_id,
            'mailWeight' => $subWeight,
            'sendPostCode' => '518000',
            'sendUserName' => 'Ms luo',
            'sendUserAddress' => 'huanancheng',
            'sendUserTel' => '18118722470',
            'sendMobilePhone' => '18118722470',
            'sendEngProvince' => 'guangdong',
            'sendEngCity' => 'shenzhen',
            'accPostCode' => $buyer->buyer_zip,
            'accUserName' => $buyer->buyer_name,
            'accUserAddress' => $buyer->buyer_address,
            'accTel' => $buyer->buyer_phone,
            'accMobilePhone' => $buyer->buyer_mobile,
            'accCity' => $buyer->buyer_city,
            'accState' => $buyer->buyer_state,
            'accEmail' => $buyer->buyer_email,
            'countryName' => $buyer->buyer_country_code,
            'countryEnName' => $buyer->buyer_country,
            'mailCode' => ' ',
            'sjDate' => '',
            'remark' => '',
            'innerType' => '1',
            'innerList' => $innerList
        ];
        $this->setRequestBody([['in0' => json_encode($requestData)]]);
        return $this;
    }

    protected function getTrunkingData()
    {
        return $this;
    }

    protected function getLabel()
    {
        return $this;
    }

    protected function updateWeight()
    {
        return $this;
    }

    /**
     * 返回处理
     */
    protected function finish()
    {
        Log::info(json_encode($this->getResponseBody()));
        Log::error(json_encode($this->getError()));
        // TODO: Implement finish() method.
        return 'end';
    }

    protected function writeLog($prefix, $body)
    {
        // TODO: Implement writeLog() method.
    }
}